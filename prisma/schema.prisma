generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  username            String                @db.VarChar(255)
  passwordHash        String                @db.VarChar(255)
  isAdmin             Boolean               @default(false)
  email               String                @unique(map: "email") @db.VarChar(255)
  isApproved          Boolean               @default(false)
  defaultLocationId   Int                   @default(1)
  emailAlerts         Boolean?              @default(false)
  inventory_logs      inventory_logs[]
  notificationHistory NotificationHistory[]
  deletedProducts     Product[]             @relation("DeletedProducts")
  auditLogs           AuditLog[]
  locations           Location              @relation(fields: [defaultLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_default_location")

  @@index([defaultLocationId], map: "fk_user_default_location")
  @@map("users")
}

model Product {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  baseName            String?               @db.VarChar(150)
  variant             String?               @db.VarChar(100)
  unit                String?               @db.VarChar(20)
  numericValue        Decimal?              @db.Decimal(10, 2)
  quantity            Int                   @default(0)
  location            Int                   @default(1)
  lowStockThreshold   Int?                  @default(1)
  deletedAt           DateTime?             @db.DateTime(0)
  deletedBy           Int?
  inventory_logs      inventory_logs[]
  notificationHistory NotificationHistory[]
  product_locations   product_locations[]
  deletedByUser       User?                 @relation("DeletedProducts", fields: [deletedBy], references: [id])

  @@index([baseName, numericValue, variant], map: "idx_product_sorting")
  @@index([deletedAt], map: "idx_deleted")
  @@index([name], map: "idx_products_name_fulltext")
  @@index([baseName], map: "idx_products_baseName_fulltext")
  @@index([variant], map: "idx_products_variant_fulltext")
  @@index([baseName, variant, name], map: "idx_products_search_composite")
  @@index([deletedBy], map: "products_deletedBy_fkey")
  @@map("products")
}

model Location {
  id                Int                 @id
  name              String              @db.VarChar(100)
  inventory_logs    inventory_logs[]
  product_locations product_locations[]
  users             User[]

  @@map("locations")
}

model inventory_logs {
  id         Int                    @id @default(autoincrement())
  userId     Int
  productId  Int
  delta      Int
  changeTime DateTime               @db.DateTime(0)
  locationId Int?
  logType    inventory_logs_logType @default(ADJUSTMENT)
  locations  Location?              @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_log_location")
  users      User                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_logs_ibfk_1")
  products   Product                @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventory_logs_ibfk_2")

  @@index([locationId], map: "fk_log_location")
  @@index([productId, locationId, changeTime], map: "idx_inventory_logs_product_location_time_desc")
  @@index([logType, changeTime], map: "idx_inventory_logs_type_time")
  @@index([userId, changeTime, productId, locationId, delta], map: "idx_inventory_logs_user_covering")
}

model product_locations {
  id         Int      @id @default(autoincrement())
  productId  Int
  locationId Int
  quantity   Int      @default(0)
  version    Int      @default(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.DateTime(0)
  locations  Location @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pl_location")
  products   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pl_product")

  @@unique([productId, locationId], map: "unique_product_location")
  @@index([locationId], map: "fk_pl_location")
  @@index([version, updatedAt], map: "idx_product_locations_version")
  @@index([updatedAt], map: "idx_product_locations_updated")
}

model NotificationHistory {
  id               Int       @id @default(autoincrement())
  userId           Int
  productId        Int
  notificationType String    @db.VarChar(50)
  sentAt           DateTime? @default(now()) @db.DateTime(0)
  products         Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notif_product")
  users            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notif_user")

  @@index([userId, productId, notificationType], map: "idx_user_product_type")
  @@index([productId], map: "idx_notif_product")
  @@map("notification_history")
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  userId        Int
  actionType    String   @db.VarChar(50)
  entityType    String   @db.VarChar(50)
  entityId      Int?
  batchId       String?  @db.VarChar(36)
  action        String   @db.Text
  details       Json?
  ipAddress     String?  @db.VarChar(45)
  userAgent     String?  @db.VarChar(255)
  affectedCount Int      @default(1)
  createdAt     DateTime @default(now()) @db.DateTime(0)
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_audit_user")

  @@index([userId], map: "idx_audit_user")
  @@index([actionType], map: "idx_audit_actionType")
  @@index([entityType, entityId], map: "idx_audit_entity")
  @@index([batchId], map: "idx_audit_batch")
  @@index([createdAt], map: "idx_audit_created")
  @@map("audit_logs")
}

enum inventory_logs_logType {
  ADJUSTMENT
  TRANSFER
}
